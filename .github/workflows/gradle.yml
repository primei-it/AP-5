# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle
# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
    
jobs:
  build:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 23
        uses: actions/setup-java@v4
        with:
          java-version: '23'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/libs/

  test:
    runs-on: self-hosted
    needs: build 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Set JAVA_HOME
        run: echo "JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))" >> $GITHUB_ENV
  #    - name: Run tests
  #      run: ./gradlew test

  docker-build:
    needs: test
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Build Docker image
        run: |
          IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ vars.REPOSITORY_NAME }}
          docker build -t $IMAGE_URI -f Dockerfile .
##TODO wrzucić variable ap-5 jako zmienna środowiskowa
      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: .
      
  
  docker-test:
      needs: docker-build
      runs-on: self-hosted

      steps:
        - name: Checkout repository
          uses: actions/checkout@v4

        - name: Download Docker image artifact
          uses: actions/download-artifact@v4
          with:
            name: docker-image
        #Todo zaplanować testy
###
  #push-to-ecr:
  #  needs: test
  #  runs-on: self-hosted

  #  steps:
  #    - name: Checkout repository
  #      uses: actions/checkout@v4

  #    - name: Download build artifacts
  #      uses: actions/download-artifact@v4
  #      with:
  #        name: build-artifacts

  #    - name: Configure AWS credentials
  #      uses: aws-actions/configure-aws-credentials@v4
  #      with:
  #        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #        aws-region: us-east-1

  #    - name: Add Docker to PATH
  #      run: echo "/usr/bin" >> $GITHUB_PATH

  #    - name: Verify Docker installation
  #      run: docker --version

  #    - name: Verify Docker installation
  #      run: which docker

  docker-push:
    needs: docker-test
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Add AWS CLI to PATH
        run: echo "/usr/local/bin" >> $GITHUB_PATH 

      - name: Run AWS CLI version
        run: aws --version

      - name: Run which AWS CLI
        run: which aws

      - name: Push Docker image to Amazon ECR
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/d3d9m8w4
        
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Push Docker image to Amazon ECR
        run: |
          IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ vars.REPOSITORY_NAME }}
          docker push $IMAGE_URI